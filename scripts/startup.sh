#!/bin/bash
# Script de d√©marrage optimis√© pour Cubi-sniper avec v√©rification de persistance des donn√©es

set -e  # Arr√™t en cas d'erreur

# Configuration
REDIS_HOST="redis"
REDIS_PORT="6379"
POSTGRES_HOST="postgres"
POSTGRES_USER="${POSTGRES_USER:-postgres}"
POSTGRES_DB="${POSTGRES_DB:-cubi}"
TRAINING_DATA_PATH="/app/training_data/training_data.jsonl"
MODELS_DIR="/app/models"
LOG_DIR="logs"

# Cr√©ation du r√©pertoire de logs
mkdir -p $LOG_DIR

# Fonction de log
log() {
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_DIR/startup_$(date +%Y%m%d).log"
}

# Fonction pour v√©rifier l'√©tat de Redis
check_redis() {
  log "V√©rification de l'√©tat Redis..."
  
  if redis-cli -h $REDIS_HOST -p $REDIS_PORT PING | grep -q "PONG"; then
    log "‚úÖ Redis OK"
    
    # V√©rifier les donn√©es essentielles
    POOLS_COUNT=$(redis-cli -h $REDIS_HOST -p $REDIS_PORT ZCARD pools)
    TOKENS_COUNT=$(redis-cli -h $REDIS_HOST -p $REDIS_PORT --scan --pattern "token:*" | wc -l)
    
    log "üìä Statistiques Redis: $POOLS_COUNT pools, $TOKENS_COUNT tokens"
    
    if [ "$POOLS_COUNT" -eq "0" ] && [ "$TOKENS_COUNT" -eq "0" ]; then
      log "‚ö†Ô∏è Aucune donn√©e token/pool trouv√©e dans Redis"
      return 1
    fi
    
    return 0
  else
    log "‚ùå Redis non disponible"
    return 1
  fi
}

# Fonction pour v√©rifier l'√©tat de PostgreSQL
check_postgres() {
  log "V√©rification de l'√©tat PostgreSQL..."
  
  if pg_isready -h $POSTGRES_HOST -U $POSTGRES_USER; then
    log "‚úÖ PostgreSQL OK"
    
    # V√©rifier les tables essentielles
    TOKEN_COUNT=$(psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -t -c "SELECT COUNT(*) FROM cubi.token_data;")
    TRADE_COUNT=$(psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -t -c "SELECT COUNT(*) FROM cubi.trade_data;")
    
    log "üìä Statistiques PostgreSQL: $TOKEN_COUNT tokens, $TRADE_COUNT trades"
    
    return 0
  else
    log "‚ùå PostgreSQL non disponible"
    return 1
  fi
}

# Fonction pour v√©rifier les mod√®les et donn√©es d'entra√Ænement
check_models() {
  log "V√©rification des mod√®les IA..."
  
  if [ -f "$MODELS_DIR/roi_model.joblib" ] && [ -f "$MODELS_DIR/exit_model.joblib" ]; then
    log "‚úÖ Mod√®les AI OK"
    
    # V√©rifier l'√¢ge des mod√®les
    ROI_AGE=$(find "$MODELS_DIR/roi_model.joblib" -type f -mtime +30 | wc -l)
    if [ "$ROI_AGE" -ne "0" ]; then
      log "‚ö†Ô∏è Les mod√®les ROI sont √¢g√©s de plus de 30 jours - r√©entra√Ænement recommand√©"
    fi
    
    return 0
  else
    log "‚ùå Mod√®les AI non trouv√©s"
    return 1
  fi
}

# Fonction pour v√©rifier les donn√©es d'entra√Ænement
check_training_data() {
  log "V√©rification des donn√©es d'entra√Ænement..."
  
  if [ -f "$TRAINING_DATA_PATH" ]; then
    LINES=$(wc -l < "$TRAINING_DATA_PATH")
    log "‚úÖ Donn√©es d'entra√Ænement OK ($LINES √©chantillons)"
    
    if [ "$LINES" -lt "100" ]; then
      log "‚ö†Ô∏è Peu de donn√©es d'entra√Ænement ($LINES √©chantillons) - collecte recommand√©e"
    fi
    
    return 0
  else
    log "‚ùå Donn√©es d'entra√Ænement non trouv√©es"
    return 1
  fi
}

# V√©rifier et r√©parer les donn√©es si n√©cessaire
restore_data_if_needed() {
  REDIS_OK=$(check_redis; echo $?)
  POSTGRES_OK=$(check_postgres; echo $?)
  MODELS_OK=$(check_models; echo $?)
  TRAINING_OK=$(check_training_data; echo $?)
  
  if [ "$REDIS_OK" -eq "0" ] && [ "$POSTGRES_OK" -eq "0" ] && [ "$MODELS_OK" -eq "0" ] && [ "$TRAINING_OK" -eq "0" ]; then
    log "‚úÖ Toutes les v√©rifications ont r√©ussi - Le syst√®me est pr√™t"
    return 0
  fi
  
  log "‚ö†Ô∏è Certaines v√©rifications ont √©chou√© - Tentative de restauration des donn√©es"
  
  # V√©rifier les backups disponibles
  BACKUP_DIR="/backup"
  LATEST_BACKUP=$(find $BACKUP_DIR -name "backup_*.tar.gz" -type f | sort -r | head -n 1)
  
  if [ -n "$LATEST_BACKUP" ]; then
    log "üì¶ Backup trouv√©: $LATEST_BACKUP"
    
    # Extraire le backup
    TEMP_DIR=$(mktemp -d)
    log "Extraction du backup vers $TEMP_DIR..."
    tar -xzf $LATEST_BACKUP -C $TEMP_DIR
    
    # Restauration Redis si n√©cessaire
    if [ "$REDIS_OK" -ne "0" ]; then
      REDIS_BACKUP=$(find $TEMP_DIR -name "redis_*.rdb" -type f | sort -r | head -n 1)
      if [ -n "$REDIS_BACKUP" ]; then
        log "üîÑ Restauration Redis depuis $REDIS_BACKUP..."
        redis-cli -h $REDIS_HOST -p $REDIS_PORT SHUTDOWN SAVE
        cp $REDIS_BACKUP /data/redis/dump.rdb
        log "‚úÖ Restauration Redis termin√©e"
      fi
    fi
    
    # Restauration PostgreSQL si n√©cessaire
    if [ "$POSTGRES_OK" -ne "0" ]; then
      PG_BACKUP=$(find $TEMP_DIR -name "postgres_*.dump" -type f | sort -r | head -n 1)
      if [ -n "$PG_BACKUP" ]; then
        log "üîÑ Restauration PostgreSQL depuis $PG_BACKUP..."
        pg_restore -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c $PG_BACKUP
        log "‚úÖ Restauration PostgreSQL termin√©e"
      fi
    fi
    
    # Restauration des mod√®les si n√©cessaire
    if [ "$MODELS_OK" -ne "0" ]; then
      if [ -d "$TEMP_DIR/models" ]; then
        log "üîÑ Restauration des mod√®les..."
        cp -r $TEMP_DIR/models/* $MODELS_DIR/
        log "‚úÖ Restauration des mod√®les termin√©e"
      fi
    fi
    
    # Restauration des donn√©es d'entra√Ænement si n√©cessaire
    if [ "$TRAINING_OK" -ne "0" ]; then
      if [ -d "$TEMP_DIR/training" ]; then
        log "üîÑ Restauration des donn√©es d'entra√Ænement..."
        mkdir -p $(dirname $TRAINING_DATA_PATH)
        cp -r $TEMP_DIR/training/* $(dirname $TRAINING_DATA_PATH)/
        log "‚úÖ Restauration des donn√©es d'entra√Ænement termin√©e"
      fi
    fi
    
    # Nettoyage
    rm -rf $TEMP_DIR
    log "üßπ Nettoyage termin√©"
    
    # V√©rifier √† nouveau apr√®s restauration
    log "üîç V√©rification apr√®s restauration..."
    REDIS_OK=$(check_redis; echo $?)
    POSTGRES_OK=$(check_postgres; echo $?)
    MODELS_OK=$(check_models; echo $?)
    TRAINING_OK=$(check_training_data; echo $?)
    
    if [ "$REDIS_OK" -eq "0" ] && [ "$POSTGRES_OK" -eq "0" ] && [ "$MODELS_OK" -eq "0" ] && [ "$TRAINING_OK" -eq "0" ]; then
      log "‚úÖ Restauration r√©ussie - Le syst√®me est pr√™t"
      return 0
    else
      log "‚ö†Ô∏è La restauration n'a pas r√©solu tous les probl√®mes"
    fi
  else
    log "‚ùå Aucun backup trouv√© pour la restauration"
  fi
  
  # G√©n√©ration de nouvelles donn√©es si pas de backup
  log "üîÑ G√©n√©ration de nouvelles donn√©es..."
  
  # Mod√®les par d√©faut si n√©cessaire
  if [ "$MODELS_OK" -ne "0" ]; then
    log "üß† G√©n√©ration de mod√®les par d√©faut..."
    python /app/train_model.py
    python /app/exit_predictor.py
  fi
  
  # Donn√©es d'entra√Ænement par d√©faut si n√©cessaire
  if [ "$TRAINING_OK" -ne "0" ]; then
    log "üìä G√©n√©ration de donn√©es d'entra√Ænement par d√©faut..."
    python /app/data_collector.py --mode export
  fi
  
  log "‚úÖ Initialisation termin√©e"
  return 0
}

# Ex√©cution principale
log "üöÄ D√©marrage du script d'initialisation Cubi-sniper"
restore_data_if_needed

log "‚úÖ Syst√®me pr√™t pour le d√©marrage des services"
exit 0