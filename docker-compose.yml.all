version: "3.8"

volumes:
  redis_data:
    driver: local
  model_data:
    driver: local
  postgres_data:
    driver: local
  training_data:
    driver: local
  backup_data:
    driver: local

networks:
  internal:
    driver: bridge

services:

  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-cubi}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backend/scripts:/scripts
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: backend
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "${API_PORT:-4000}:${API_PORT:-4000}"
      - "${WS_PORT:-3010}:${WS_PORT:-3010}"
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - POSTGRES_URL=${POSTGRES_URL:-postgresql://postgres:postgres@postgres:5432/cubi}
      - API_PORT=${API_PORT:-4000}
      - WS_PORT=${WS_PORT:-3010}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - ./wallet:/app/wallet:ro
      - ./backend:/app
      - /app/node_modules
    networks:
      - internal
    restart: unless-stopped

  ui:
    build: ./ui
    container_name: ui
    depends_on:
      - backend
    ports:
      - "${UI_PORT:-3000}:${UI_PORT:-3000}"
    volumes:
      - ./ui:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE=http://localhost:${API_PORT:-4000}
      - VITE_WS_BASE=ws://localhost:${WS_PORT:-3010}
      - UI_PORT=${UI_PORT:-3000}
    networks:
      - internal
    restart: unless-stopped

  ai_model:
    build: ./ai_model
    container_name: ai_model
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ai_model:/app
      - model_data:/app/models
      - training_data:/app/training_data
    ports:
      - "${AI_PORT:-8000}:${AI_PORT:-8000}"
    environment:
      - AI_PORT=${AI_PORT:-8000}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - POSTGRES_URL=${POSTGRES_URL:-postgresql://postgres:postgres@postgres:5432/cubi}
      - TRAINING_DATA_PATH=/app/training_data/training_data.jsonl
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  data_collector:
    build: 
      context: ./ai_model
      dockerfile: Dockerfile
      target: collector
    container_name: data_collector
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - POSTGRES_URL=${POSTGRES_URL:-postgresql://postgres:postgres@postgres:5432/cubi}
      - JUPITER_API_URL=${JUPITER_API_URL:-https://quote-api.jup.ag/v4}
      - TRAINING_DATA_PATH=/app/training_data/training_data.jsonl
    volumes:
      - training_data:/app/training_data
      - ./ai_model:/app
      - backup_data:/app/backup
    networks:
      - internal
    restart: unless-stopped
    # Collecte données toutes les heures
    command: python data_collector.py --schedule hourly --mode full

  ocaml_engine:
    build: ./ocaml_engine
    container_name: ocaml_engine
    environment:
      - PORT=${OCAML_PORT:-8080}
    volumes:
      - ./ocaml_engine:/home/opam/app
    # Create a default input.json file on startup to prevent errors
    command: >
      sh -c "echo '{\"liquidity\": 10.0, \"holders\": 50, \"ai_score\": 0.8, \"volatility_1m\": 0.2, \"buy_sell_ratio\": 1.5}' > /home/opam/app/input.json &&
             cd /home/opam/app && eval $$(opam env) && exec dune exec ./TokenDB.exe"
    networks:
      - internal
    restart: unless-stopped

  solana_agent:
    build: ./solana_agent
    container_name: solana_agent
    depends_on:
      redis:
        condition: service_healthy
      ai_model:
        condition: service_started
      ocaml_engine:
        condition: service_started
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - AI_MODEL_URL=http://ai_model:${AI_PORT:-8000}
      - EXIT_MODEL_URL=http://ai_model:${AI_PORT:-8000}/exit
      - OCAML_API_URL=http://ocaml_engine:${OCAML_PORT:-8080}/score
      - LIVE_MODE=${LIVE_MODE:-false}
      - WALLET_KEYPAIR_PATH=/app/wallet/wallet.json
      - API_BASE_URL=http://backend:${API_PORT:-4000}
      - CREATOR_WALLET=${CREATOR_WALLET}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL:-https://api.mainnet-beta.solana.com}
      - DOCKER_CONTAINER=true
    volumes:
      - ./wallet:/app/wallet:ro
      - ./solana_agent:/app
      - /app/node_modules
    networks:
      - internal
    restart: unless-stopped

  market_watcher:
    build: ./market_watcher
    container_name: market_watcher
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JUPITER_API_URL=${JUPITER_API_URL:-https://quote-api.jup.ag/v4}
    volumes:
      - ./market_watcher:/app
      - /app/node_modules
    networks:
      - internal
    restart: unless-stopped

  backup_service:
    image: debian:bullseye-slim
    container_name: backup_service
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - redis_data:/data/redis:ro
      - postgres_data:/data/postgres:ro
      - training_data:/data/training:ro
      - model_data:/data/models:ro
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh
    environment:
      - BACKUP_INTERVAL=${BACKUP_INTERVAL:-86400}  # 24 heures par défaut
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-cubi}
    command: bash -c "apt-get update && apt-get install -y cron postgresql-client redis-tools && chmod +x /backup.sh && /backup.sh"
    networks:
      - internal
    restart: unless-stopped